name: Release
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  version:
    if: contains(github.event.head_commit.message, '!release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump version
        run: |
          RELEASE_TYPE=$(echo "${{ github.event.head_commit.message }}" | grep -oP '!release:\s*\K(major|minor|patch)' || echo "patch")
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          npm version $RELEASE_TYPE --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to $(node -p "require('./package.json').version") [skip ci]"
          git pull --rebase origin ${{ github.head_ref || github.ref_name }}
          git push origin HEAD:main

  build:
    needs: version
    if: contains(github.event.head_commit.message, '!release')
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        include:
          - os: windows-latest
            asset_name: "soundcloud-*.exe"
          - os: ubuntu-latest
            asset_name: "soundcloud-*.AppImage"
          - os: macos-latest
            asset_name: "soundcloud-*.dmg"

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Enable pnpm
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build application
        run: pnpm build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.exe
            dist/*.AppImage
            dist/*.dmg
            dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Auto Release
        uses: uwu-loli/release-helper@v1.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_COMMAND: "echo 'Using pre-built artifacts'"
          ASSET_PATTERNS: "artifacts/*/*"
          OPENAI_API_BASE_URL: https://generativelanguage.googleapis.com/v1beta/openai
          OPENAI_API_MODEL: gemini-2.5-flash
          OPENAI_API_KEY: ${{ secrets.AI_GEMINI_API_KEY }}
